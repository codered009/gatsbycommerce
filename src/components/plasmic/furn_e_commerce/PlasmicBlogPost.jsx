// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: vTsuUyJBsoqwPKwGjvgKMg
// Component: ZOltP1jkppDh
import * as React from "react"
import * as p from "@plasmicapp/react-web"
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
} from "@plasmicapp/react-web"
import "@plasmicapp/react-web/lib/plasmic.css"
import * as defaultcss from "../plasmic__default_style.module.css" // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_furn_e_commerce.module.css" // plasmic-import: vTsuUyJBsoqwPKwGjvgKMg/projectcss
import * as sty from "./PlasmicBlogPost.module.css" // plasmic-import: ZOltP1jkppDh/css
import b1F2XBVuVHc4Jy from "./images/b1.jpeg" // plasmic-import: f2xBVuVHc4JY/picture

export const PlasmicBlogPost__VariantProps = new Array("long")

export const PlasmicBlogPost__ArgProps = new Array(
  "title",
  "description",
  "image",
  "author"
)

function PlasmicBlogPost__RenderFunc(props) {
  const { variants, args, overrides, forNode, dataFetches } = props
  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        defaultcss.all,
        projectcss.all,
        projectcss.root_reset,
        sty.root,
        { [sty.root__long]: hasVariant(variants, "long", "long") }
      )}
    >
      {(hasVariant(variants, "long", "long") ? true : true) ? (
        <div
          className={classNames(
            defaultcss.all,
            projectcss.all,
            sty.freeBox___2OQes,
            {
              [sty.freeBox__long___2OQeSpN3Sa]: hasVariant(
                variants,
                "long",
                "long"
              ),
            }
          )}
        >
          {p.renderPlasmicSlot({
            defaultContents: (
              <p.PlasmicImg
                alt={""}
                className={classNames(sty.img___43Tmn)}
                displayHeight={"auto"}
                displayMaxHeight={"none"}
                displayMaxWidth={"none"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"100%"}
                src={{
                  src: b1F2XBVuVHc4Jy,
                  fullWidth: 370,
                  fullHeight: 250,
                  aspectRatio: undefined,
                }}
              />
            ),

            value: args.image,
          })}
        </div>
      ) : null}

      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(
          defaultcss.all,
          projectcss.all,
          sty.freeBox__sRwsS,
          {
            [sty.freeBox__long__sRwsSpN3Sa]: hasVariant(
              variants,
              "long",
              "long"
            ),
          }
        )}
      >
        {p.renderPlasmicSlot({
          defaultContents: "Why Brands are Looking at Local Language",
          value: args.title,
          className: classNames(sty.slotTargetTitle, {
            [sty.slotTargetTitle__long]: hasVariant(variants, "long", "long"),
          }),
        })}

        {p.renderPlasmicSlot({
          defaultContents: "By Robert Norby / 18th March 2018",
          value: args.author,
          className: classNames(sty.slotTargetAuthor),
        })}

        {p.renderPlasmicSlot({
          defaultContents:
            "Nemo Enim Ipsam Voluptatem Quia Voluptas Sit Aspernatur Aut Odit Aut Fugit, Sed Quia Consequuntur Magni Dolores Eos Qui Ratione Voluptatem Sequi Nesciunt....",
          value: args.description,
          className: classNames(sty.slotTargetDescription, {
            [sty.slotTargetDescription__long]: hasVariant(
              variants,
              "long",
              "long"
            ),
          }),
        })}
      </p.Stack>
    </p.Stack>
  )
}

const PlasmicDescendants = {
  root: ["root"],
}

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicBlogPost__ArgProps,
      internalVariantPropNames: PlasmicBlogPost__VariantProps,
    })

    const { dataFetches } = props
    return PlasmicBlogPost__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName,
    })
  }
  if (nodeName === "root") {
    func.displayName = "PlasmicBlogPost"
  } else {
    func.displayName = `PlasmicBlogPost.${nodeName}`
  }
  return func
}

export const PlasmicBlogPost = Object.assign(
  // Top-level PlasmicBlogPost renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    // Metadata about props expected for PlasmicBlogPost
    internalVariantProps: PlasmicBlogPost__VariantProps,
    internalArgProps: PlasmicBlogPost__ArgProps,
  }
)

export default PlasmicBlogPost
/* prettier-ignore-end */
