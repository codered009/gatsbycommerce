// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: vTsuUyJBsoqwPKwGjvgKMg
// Component: GrOEPhscx_v
import * as React from "react"
import { Link } from "gatsby"
import * as p from "@plasmicapp/react-web"
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
} from "@plasmicapp/react-web"
import MenuButton from "../../MenuButton" // plasmic-import: 8FB9biapNPhM/component
import LinkButton from "../../LinkButton" // plasmic-import: Ch2oeD3ovQGz/component
import IconLink from "../../IconLink" // plasmic-import: sNIw3_URSO_R/component
import { useScreenVariants } from "./PlasmicGlobalVariant__Screen" // plasmic-import: LLj2xHLSZywX/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css"
import * as defaultcss from "../plasmic__default_style.module.css" // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_furn_e_commerce.module.css" // plasmic-import: vTsuUyJBsoqwPKwGjvgKMg/projectcss
import * as sty from "./PlasmicHeader.module.css" // plasmic-import: GrOEPhscx_v/css
import SearchIcon from "./icons/PlasmicIcon__Search" // plasmic-import: vLKoKJU9NlSw/icon
import CogIcon from "./icons/PlasmicIcon__Cog" // plasmic-import: TbXSWsDu8Bxf/icon
import ShoppingCartIcon from "./icons/PlasmicIcon__ShoppingCart" // plasmic-import: ARrTn4qfdMRh/icon
import plasmicVYh4KSwAHt3 from "./images/plasmic.png" // plasmic-import: vYH4k-SwAHt3/picture

export const PlasmicHeader__VariantProps = new Array("expanded")

export const PlasmicHeader__ArgProps = new Array()

function PlasmicHeader__RenderFunc(props) {
  const { variants, args, overrides, forNode, dataFetches } = props
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants(),
  })

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        defaultcss.all,
        projectcss.all,
        projectcss.root_reset,
        sty.root,
        { [sty.root__expanded]: hasVariant(variants, "expanded", "expanded") }
      )}
    >
      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(
          defaultcss.all,
          projectcss.all,
          sty.freeBox__hFz4C
        )}
      >
        {(hasVariant(globalVariants, "screen", "mobile") ? true : true) ? (
          <MenuButton
            data-plasmic-name={"menuButton"}
            data-plasmic-override={overrides.menuButton}
            className={classNames("__wab_instance", sty.menuButton, {
              [sty.menuButton__expanded]: hasVariant(
                variants,
                "expanded",
                "expanded"
              ),
            })}
            expanded={
              hasVariant(variants, "expanded", "expanded") &&
              hasVariant(globalVariants, "screen", "mobile")
                ? "expanded"
                : undefined
            }
          />
        ) : null}

        <p.PlasmicLink
          data-plasmic-name={"link"}
          data-plasmic-override={overrides.link}
          className={classNames(defaultcss.a, projectcss.a, sty.link)}
          component={Link}
          href={"/"}
          platform={"gatsby"}
        >
          <p.PlasmicImg
            data-plasmic-name={"img"}
            data-plasmic-override={overrides.img}
            alt={""}
            className={classNames(sty.img)}
            displayHeight={"auto"}
            displayMaxHeight={"none"}
            displayMaxWidth={"none"}
            displayMinHeight={"0"}
            displayMinWidth={"0"}
            displayWidth={"100%"}
            src={{
              src: plasmicVYh4KSwAHt3,
              fullWidth: 3216,
              fullHeight: 624,
              aspectRatio: undefined,
            }}
          />
        </p.PlasmicLink>

        {(
          hasVariant(variants, "expanded", "expanded") &&
          hasVariant(globalVariants, "screen", "mobile")
            ? true
            : hasVariant(globalVariants, "screen", "mobile")
            ? true
            : true
        ) ? (
          <div
            className={classNames(
              defaultcss.all,
              projectcss.all,
              sty.freeBox__klI6R,
              {
                [sty.freeBox__expanded__klI6RBeyj]: hasVariant(
                  variants,
                  "expanded",
                  "expanded"
                ),
              }
            )}
          >
            <LinkButton
              className={classNames("__wab_instance", sty.linkButton___6JQfL)}
              href={"/#home"}
              size={"small"}
              text={"Home"}
              type={"blankGray"}
            />

            <LinkButton
              className={classNames("__wab_instance", sty.linkButton__dVyBp)}
              href={"/#new-arrival"}
              size={"small"}
              text={"New Arrival"}
              type={"blankGray"}
            />

            <LinkButton
              className={classNames("__wab_instance", sty.linkButton__eF5Pv)}
              href={"/#features"}
              size={"small"}
              text={"Features"}
              type={"blankGray"}
            />

            <LinkButton
              className={classNames("__wab_instance", sty.linkButton__dmiUp)}
              href={"/#blog"}
              size={"small"}
              text={"Blog"}
              type={"blankGray"}
            />

            <LinkButton
              className={classNames("__wab_instance", sty.linkButton__x1NCd)}
              href={"/#contact"}
              size={"small"}
              text={"Contact"}
              type={"blankGray"}
            />
          </div>
        ) : null}

        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(
            defaultcss.all,
            projectcss.all,
            sty.freeBox__xt2Ob
          )}
        >
          <IconLink
            className={classNames("__wab_instance", sty.iconLink__k5Ywv)}
            icon={
              <SearchIcon
                className={classNames(
                  defaultcss.all,
                  projectcss.all,
                  sty.svg__rMcPi
                )}
                role={"img"}
              />
            }
          />

          <IconLink
            className={classNames("__wab_instance", sty.iconLink__qa3Aw)}
            icon={
              <CogIcon
                className={classNames(
                  defaultcss.all,
                  projectcss.all,
                  sty.svg___9S2Gp
                )}
                role={"img"}
              />
            }
          />

          <IconLink
            className={classNames("__wab_instance", sty.iconLink__jUn7N)}
            icon={
              <ShoppingCartIcon
                className={classNames(
                  defaultcss.all,
                  projectcss.all,
                  sty.svg__tntat
                )}
                role={"img"}
              />
            }
          />
        </p.Stack>
      </p.Stack>

      {(
        hasVariant(variants, "expanded", "expanded") &&
        hasVariant(globalVariants, "screen", "mobile")
          ? true
          : true
      ) ? (
        <div
          className={classNames(
            defaultcss.all,
            projectcss.all,
            sty.freeBox__exFrj,
            {
              [sty.freeBox__expanded__exFrjBeyj]: hasVariant(
                variants,
                "expanded",
                "expanded"
              ),
            }
          )}
        >
          <LinkButton
            className={classNames("__wab_instance", sty.linkButton__o0VpP)}
            text={"Home"}
            type={"blankGray"}
          />

          <LinkButton
            className={classNames("__wab_instance", sty.linkButton__bxGy)}
            text={"New Arrival"}
            type={"blankGray"}
          />

          <LinkButton
            className={classNames("__wab_instance", sty.linkButton__uzEgR)}
            text={"Features"}
            type={"blankGray"}
          />

          <LinkButton
            className={classNames("__wab_instance", sty.linkButton__uwKnx)}
            text={"Blog"}
            type={"blankGray"}
          />

          <LinkButton
            className={classNames("__wab_instance", sty.linkButton__vBfuO)}
            text={"Contact"}
            type={"blankGray"}
          />
        </div>
      ) : null}
    </div>
  )
}

const PlasmicDescendants = {
  root: ["root", "menuButton", "link", "img"],
  menuButton: ["menuButton"],
  link: ["link", "img"],
  img: ["img"],
}

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicHeader__ArgProps,
      internalVariantPropNames: PlasmicHeader__VariantProps,
    })

    const { dataFetches } = props
    return PlasmicHeader__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName,
    })
  }
  if (nodeName === "root") {
    func.displayName = "PlasmicHeader"
  } else {
    func.displayName = `PlasmicHeader.${nodeName}`
  }
  return func
}

export const PlasmicHeader = Object.assign(
  // Top-level PlasmicHeader renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    menuButton: makeNodeComponent("menuButton"),
    link: makeNodeComponent("link"),
    img: makeNodeComponent("img"),
    // Metadata about props expected for PlasmicHeader
    internalVariantProps: PlasmicHeader__VariantProps,
    internalArgProps: PlasmicHeader__ArgProps,
  }
)

export default PlasmicHeader
/* prettier-ignore-end */
